// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using TicketThijsMateo.Domains.Context;

#nullable disable

namespace TicketThijsMateo.Domains.Migrations
{
    [DbContext(typeof(TicketDBContext))]
    partial class TicketDBContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.18")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Abonnement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Familienaam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Voornaam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int?>("ZitplaatsId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ZitplaatsId")
                        .IsUnique()
                        .HasFilter("[ZitplaatsId] IS NOT NULL");

                    b.ToTable("Abonnementen");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Club", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("Clubs");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Soortplaats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("Capaciteit")
                        .HasColumnType("int");

                    b.Property<string>("Naam")
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<decimal?>("Tarief")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.ToTable("Soortplaatsen");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Stadium", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Adres")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stadia");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Ticket", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("AankoopDatum")
                        .HasColumnType("datetime2");

                    b.Property<string>("Familienaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Voornaam")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("WedstrijdId")
                        .HasColumnType("int");

                    b.Property<int?>("ZitplaatsId")
                        .HasColumnType("int");

                    b.Property<bool>("betaald")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.HasIndex("WedstrijdId");

                    b.HasIndex("ZitplaatsId");

                    b.ToTable("Tickets");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Wedstrijd", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("Datum")
                        .HasColumnType("datetime2");

                    b.Property<int>("MatchDag")
                        .HasColumnType("int");

                    b.Property<int>("StadiumId")
                        .HasColumnType("int");

                    b.Property<int>("ThuisPloegId")
                        .HasColumnType("int");

                    b.Property<int?>("TicketId")
                        .HasColumnType("int");

                    b.Property<int>("UitPloegId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StadiumId");

                    b.HasIndex("ThuisPloegId");

                    b.HasIndex("TicketId");

                    b.HasIndex("UitPloegId");

                    b.ToTable("Wedstrijden");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Zitplaats", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("AbbonementId")
                        .HasColumnType("int");

                    b.Property<int>("RijNummer")
                        .HasColumnType("int");

                    b.Property<int>("SoortplaatsId")
                        .HasColumnType("int");

                    b.Property<int>("ZetelNummer")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("SoortplaatsId");

                    b.ToTable("Zitplaatsen");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Abonnement", b =>
                {
                    b.HasOne("TicketThijsMateo.Domains.Context.Zitplaats", "Zitplaats")
                        .WithOne("Abonnement")
                        .HasForeignKey("TicketThijsMateo.Domains.Context.Abonnement", "ZitplaatsId");

                    b.Navigation("Zitplaats");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Club", b =>
                {
                    b.HasOne("TicketThijsMateo.Domains.Context.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Soortplaats", b =>
                {
                    b.HasOne("TicketThijsMateo.Domains.Context.Stadium", "Stadium")
                        .WithMany("Soortplaatsen")
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Ticket", b =>
                {
                    b.HasOne("TicketThijsMateo.Domains.Context.Wedstrijd", "Wedstrijd")
                        .WithMany("Tickets")
                        .HasForeignKey("WedstrijdId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketThijsMateo.Domains.Context.Zitplaats", "Zitplaats")
                        .WithMany()
                        .HasForeignKey("ZitplaatsId");

                    b.Navigation("Wedstrijd");

                    b.Navigation("Zitplaats");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Wedstrijd", b =>
                {
                    b.HasOne("TicketThijsMateo.Domains.Context.Stadium", "Stadium")
                        .WithMany()
                        .HasForeignKey("StadiumId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("TicketThijsMateo.Domains.Context.Club", "ThuisPloeg")
                        .WithMany("ThuisWedstrijden")
                        .HasForeignKey("ThuisPloegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("TicketThijsMateo.Domains.Context.Ticket", null)
                        .WithMany("Wedstrijden")
                        .HasForeignKey("TicketId");

                    b.HasOne("TicketThijsMateo.Domains.Context.Club", "UitPloeg")
                        .WithMany("UitWedstrijden")
                        .HasForeignKey("UitPloegId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Stadium");

                    b.Navigation("ThuisPloeg");

                    b.Navigation("UitPloeg");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Zitplaats", b =>
                {
                    b.HasOne("TicketThijsMateo.Domains.Context.Soortplaats", "Soortplaats")
                        .WithMany("Zitplaatsen")
                        .HasForeignKey("SoortplaatsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Soortplaats");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Club", b =>
                {
                    b.Navigation("ThuisWedstrijden");

                    b.Navigation("UitWedstrijden");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Soortplaats", b =>
                {
                    b.Navigation("Zitplaatsen");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Stadium", b =>
                {
                    b.Navigation("Soortplaatsen");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Ticket", b =>
                {
                    b.Navigation("Wedstrijden");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Wedstrijd", b =>
                {
                    b.Navigation("Tickets");
                });

            modelBuilder.Entity("TicketThijsMateo.Domains.Context.Zitplaats", b =>
                {
                    b.Navigation("Abonnement");
                });
#pragma warning restore 612, 618
        }
    }
}
